on:
  push:
    branches:
      - main
  workflow_dispatch:

name: pack

jobs:
  pack:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
      - name: SSH Agent
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{ secrets.SSH_KEY }}"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
      - name: Download
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        run: |
          git clone --recurse-submodules --depth 1 --shallow-submodules git@github.com:CoLearn-Dev/colink-server-dev.git
          git clone --recurse-submodules --depth 1 --shallow-submodules git@github.com:CoLearn-Dev/colink-sdk-rust-dev.git
          git clone --recurse-submodules --depth 1 --shallow-submodules git@github.com:CoLearn-Dev/colink-protocol-policy-module-dev.git
          git clone --recurse-submodules --depth 1 --shallow-submodules git@github.com:CoLearn-Dev/colink-protocol-remote-storage-dev.git
          git clone --recurse-submodules --depth 1 --shallow-submodules git@github.com:CoLearn-Dev/colink-protocol-registry-dev.git
      - name: Compile
        run: | 
          ./compile_release.sh
      - name: Pack
        run: |
          tar -pcf colink.tar colinkctl colink-*/target/release/colink-*[!.] colink-*/target/release/examples
          cat install_colink.template.sh colink.tar > install_colink.sh
      - name: Get RELEASE_NAME
        run: |
          echo "RELEASE_NAME=$(date +'%Y-%m-%d')-$(expr $(date +%s) - $(date +%s -d "$(date +'%Y-%m-%d')"))" >> $GITHUB_ENV
      - name: Create tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.RELEASE_NAME }}',
              sha: context.sha
            })
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./install_colink.sh
          asset_name: install_colink.sh
          asset_content_type: application/x-sh
